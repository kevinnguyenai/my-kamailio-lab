####### Routing Logic ########


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {

	xlog("------------- request_route\n");
	xlog("L_INFO", "CALL $ci $rm FROM $fU@$fd - $fu (IP:$si:$sp) - User-Agent $hdr(User-Agent) \n");
	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# handle retransmissions
	if(t_precheck_trans()) {
		t_check_trans();
		exit;
	}
	t_check_trans();

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE"))
		xlog("------------- record_route \n");
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		xlog("------------- requst method is INVITE \n");
		#setflag(FLT_ACC); # do accounting
	}

	# dispatch requests to foreign domains
	# route(SIPOUT);

	### requests for my local domains
	/*
	xdbg("-------------- CHECK REQUEST USER: <$rU> - DOMAIN \n");
	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}
	*/
	# append some random headers for trials 
	#append_hf("mango: $ru\r\n");
	#append_hf("pineapple: $ru\r\n");

	route(DISPATCH);
}


route[RELAY] {
	xdbg("------------- RELAY \n");

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	xlog("------------- >>>  RELAY - t_relay now\n");
	if (!t_relay()) {
		xlog("------------- >>>  RELAY - t_relay failed \n");
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	xdbg("------------- REQINIT \n");

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	xdbg("------------- WITHINDLG \n");

	if (!has_totag()) return;

	# sequential request withing a dialog should take the path determined by record-routing
	if (loose_route()) {
		xdbg("------------- WITHINGDLG - LOSE_ROUTE \n");
		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		}
		else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			route(NATMANAGE);
		}
		else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}
	if ( is_method("ACK") ) {
		xdbg("-------------- WITHINGDLG - ACK \n");
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404", "Not here");
	exit;
}

# Caller NAT detection
route[NATDETECT] {
	xdbg("------------- NATDETECT \n");

	#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			xdbg("------------- NATDETECT - REGISTER  , fix_nated_register \n");
			fix_nated_register();
		} else {
			if(is_first_hop())
				xdbg("------------- NATDETECT - is_first_hop , set_contact_alias \n");
				set_contact_alias();
		}
		setflag(FLT_NATS);
	}
	#!endif
	return;
}

# RTPProxy control
route[NATMANAGE] {
	xdbg("------------- NATMANAGE \n");

	#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
		return;

	rtpproxy_manage("co");

	if (is_request()) {
		if (!has_totag()) {
			xlog("------------- NATMANAGE - is_request , add rr_param \n");
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		xlog("------------- NATMANAGE - is_reply , set contact alais \n");
		if(isbflagset(FLB_NATB)) {
			set_contact_alias();
		}
	}
	#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
	xdbg("------------- NATMANAGE \n");
	#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
	#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	xdbg("------------- SIPOUT \n");
	if (uri==myself) return;

	xlog("------------- SIPOUT - outbound \n");
	append_hf("P-hint: outbound\r\n");
	route(RELAY);
	exit;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("------------- MANAGE_BRANCH \n");
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply ----------- MANAGE_REPLY \n");
	

	if(status=~"1[0-9][0-9]") {
        xlog("-------------- MANAGE_REPLY provisional response \n");
    }
	if(status=~"2[0-9][0-9]"){
		xlog("incoming reply ----------- MANAGE_REPLY - status \n");
		route(NATMANAGE);
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xdbg("----------- MANAGE_FAILURE \n");
	
	route(NATMANAGE);
	if (t_is_canceled()) {
		exit;
	}
}
