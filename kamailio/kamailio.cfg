
#!KAMAILIO
#
# sample config file for dispatcher module
# - load balancing of VoIP calls with round robin
# - no TPC listening
# - don't dispatch REGISTER and presence requests

#
# *** To run in debug mode:
#     - define WITH_DEBUG
#
#!define WITH_DEBUG


#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@db/kamailio"
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

/* comment the next line to enable TCP */
disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on revers DNS on IPs (default on) */
auto_aliases=no

/* add local domain aliases */
# alias="mysipserver.com"

port=5060
#listen=udp:0.0.0.0:5060 advertise 172.19.0.5:5060
#listen=udp:0.0.0.0:5060 advertise 42.116.254.236:5060

/* uncomment and configure the following line if you want Kamailio to
   bind on a specific interface/port/proto (default bind on all available) */
# listen=udp:127.0.0.1:5060

sip_warning=no

####### Modules Section ########

# set module path
#mpath="/usr/local/lib/kamailio/modules/"

loadmodule "db_mysql.so"
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "acc.so"
loadmodule "dispatcher.so"
loadmodule "sdpops.so"
loadmodule "mangler.so"

# ----------------- setting module-specific parameters ---------------


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)


# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- acc params -----
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;src_ip=$si")

# ----- tm params -----
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 40000)

# ----- dispatcher params -----
modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "table_name", "dispatcher")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "xavp_dst", "_dsdst_")
modparam("dispatcher", "xavp_ctx", "_dsctx_")

####### Routing Logic ########


# main request routing logic

request_route {

	# per request initial checks
	route(REQINIT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}


	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}

	# handle presence related requests
	route(PRESENCE);
	
	# handle registrations
	#route(REGISTRAR);

	#if ($rU==$null) {
	#	# request with no Username in RURI
	#	sl_send_reply("484","Address Incomplete");
	#	exit;
	#}

	# dispatch destinations
	route(DISPATCH);
}


route[RELAY] {
	
        if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
                if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
        }
	

	
	if (is_method("INVITE")) {
		if(!(to_uri =~ "sip:.+@cs[0-9].oncx.cf")) {
			xdbg("-----SCRIPT: current setting dst_uri <$du>\n");
		}
		if(loose_route()){
			xdbg("-----SCRIPT: lose_route setting dst_uri <$du>\n");
		}
	}
	/*
	if (sdp_get("$avp(sdp)")==1) {
		xdbg("----SCRIPT: save SDP to avp\n");
		if(search_hf("CSeq", "2 INVITE", "f")) {
			xdbg("----SCRIPT: SDP 2 INVITE detected\n");
			#sdp_mangle_ip("172.19.0.0/16", "42.116.254.236");
			if(search_hf("Contact", ":172.19.0.[0-9]+:", "f")) {
				xdbg("----SCRIPT: SDP 2 INVITE to client add route back\n");
				append_hf("Route", "sip:42.116.254.236:5060\r\n");
			}
		}
	}
	*/

	/*
	if (search_hf("Content-Type", "application/sdp", "f")) {
		xdbg("-----SCRIPT:  debugging search_hf\n");
		
		if( subst_hf("Route", "/:172.19.0.5/:42.116.254.236/", "f")){
			xdbg("-----SCRIPT: debugging subst_hf\n");
			#sl_send_reply("485", "Record-Route Error");
		}
		
	}	
	*/

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
				route(DISPATCH);
			}
			if (is_method("ACK")) {
				route(DISPATCH);	
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK;
					# must be ACK after a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard.
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if(!is_method("REGISTER"))
		return;

	sl_send_reply("404", "No registrar");
	exit;
}

# Presence server route
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

	sl_send_reply("404", "Not here");
	exit;
}

# Dispatch requests
route[DISPATCH] {
        xdbg("----- SCRIPT: request from <$fU> with <$fd>");
        if (!is_method("REGISTER|INVITE|ACK|BYE")) {
                route(RELAY);
                exit;
        } else {
	if(is_method("REGISTER") || (is_method("INVITE|ACK|BYE") && to_uri=~"sip:.+@cs[0-9].oncx.cf")) {
                if (ds_select_dst("1", "4")) {
                        while("sip:"+$fd+":5060" != $xavp(_dsdst_=>uri)) {
                                xdbg("--- SCRIPT: Cannot go from <$fU> with <sip:$fd:5060> to <$ru> via <$du> (attrs: $xavp(_dsdst_=>attrs))\n");
                                if(!ds_next_dst()){
                                        send_reply("404", "No destination");
                                        exit;
                                }
                        }
                        xdbg("--- SCRIPT: going from <$fU> with  <sip:$fd:5060> to <$ru> via <$du> (attrs: $xavp(_dsdst_=>attrs))\n");
                        route(RELAY);
                        exit;
                }
	} else {
		route(RELAY);
		exit;
	}
	}


}

# Try next destionations in failure route
failure_route[RTF_DISPATCH] {
	if (t_is_canceled()) {
		exit;
	}
	# next DST - only for 500 or local timeout
	if (t_check_status("500")
			or (t_branch_timeout() and !t_branch_replied())) {
		if(ds_next_dst()) {
			xdbg("--- SCRIPT: retrying to <$ru> via <$du> (attrs: $xavp(_dsdst_=>attrs))\n");
			t_on_failure("RTF_DISPATCH");
			route(RELAY);
			exit;
		}
	}
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
        xdbg("----SCRIPT: incoming reply ----------- MANAGE_REPLY \n");

	if(is_method("ACK")) {
		xdbg("-----SCRIPT: incomming reply ----------- MANAGE_REPLY - ACK \n");
	}
	
        if(status=~"2[0-9][0-9]"){
                xlog("----SCRIPT: incoming reply ----------- MANAGE_REPLY - status \n");
                route(NATMANAGE);
        }
}

route[NATMANAGE] {
	if(is_reply()) {
                if(search_hf("CSeq", "2 INVITE", "f")) {
                        xdbg("----SCRIPT: SDP 2 INVITE detected\n");
                        #sdp_mangle_ip("172.19.0.0/16", "42.116.254.236");
                        if(search_hf("Contact", ":172.19.0.[0-9]+:", "f")) {
                                xdbg("----SCRIPT: SDP 2 INVITE to client add route back\n");
                                subst_hf("Record-Route", "/:172.19.0.5;/:42.116.254.236;/", "f");
				#append_hf("Route: <sip:42.116.254.236:5060>\r\n");
			}
		}
			
	}
	return;

}
